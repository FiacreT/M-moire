# coding: utf-8
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/stable/config


# -- Imports -----------------------------------------------------------------

import os
import sys
import shutil
import collections
import datetime
import semantic_version
import sphinx_bootstrap_theme

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

docsrc_dir = os.path.abspath(os.path.join(__file__, '..'))
project_dir = os.path.abspath(os.path.join(docsrc_dir, '..', '..'))

sys.path.insert(0, project_dir)
import instalooter

# -- Files setup -------------------------------------------------------------

with open(os.path.join(project_dir, "CHANGELOG.rst"), 'rb') as src:
    with open(os.path.join(docsrc_dir, "changelog.rst"), 'wb') as dst:
        dst.write(b":tocdepth: 2\n\n")
        shutil.copyfileobj(src, dst)

# -- Project information -----------------------------------------------------

project = 'InstaLooter'
author = instalooter.__author__
copyright = '2016-{}, {}'.format(datetime.date.today().year, author)

# The full version, including alpha/beta/rc tags
release = instalooter.__version__
# Semantic version
semver = semantic_version.Version(instalooter.__version__)
# The short X.Y version
version = "{v.major}.{v.minor}.{v.patch}".format(v=semver)

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
needs_sphinx = '1.7'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
    'sphinx.ext.napoleon',
    'sphinx_bootstrap_theme',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# The name of the default role for inline references
default_role = "py:obj"

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'bootstrap'

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = sphinx_bootstrap_theme.get_html_theme_path()

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {

    # Bootswatch (http://bootswatch.com/) theme.
    'bootswatch_theme': "simplex",

    # Choose Bootstrap version.
    'bootstrap_version': "3",

    # Tab name for entire site. (Default: "Site")
    'navbar_site_name': "Documentation",

    # HTML navbar class (Default: "navbar") to attach to <div> element.
    # For black navbar, do "navbar navbar-inverse"
    'navbar_class': "navbar navbar-inverse",

    # Render the next and previous page links in navbar. (Default: true)
    'navbar_sidebarrel': True,

    # Render the current pages TOC in the navbar. (Default: true)
    'navbar_pagenav': False,

    # A list of tuples containing pages or urls to link to.
    'navbar_links': [
        ("GitHub", "https://github.com/althonos/InstaLooter", True),
        ("PyPI", "https://pypi.org/project/InstaLooter", True),
    ],

}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
html_sidebars = {
    "*": ['localtoc.html'],
    os.path.join("instalooter", "*"): [],
}

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'InstaLooter'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'InstaLooter.tex', 'InstaLooter Documentation',
     'Martin Larralde', 'manual'),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'instalooter', 'InstaLooter Documentation',
     [author], 1)
]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'InstaLooter', 'InstaLooter Documentation',
     author, 'InstaLooter', 'One line description of project.',
     'Miscellaneous'),
]

# -- Extension configuration -------------------------------------------------

# -- Options for autosummary -------------------------------------------------

autosummary_generate = [os.path.join("instalooter", "index")]

# -- Options for autodoc -----------------------------------------------------

autodoc_member_order = "groupwise"
autoclass_content = "both"

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'python': ('https://docs.python.org/3/', None),
    'fs': ('https://docs.pyfilesystem.org/en/latest/', None),
    'requests': ('http://requests.readthedocs.io/en/master/', None),
    'coloredlogs': ('https://coloredlogs.readthedocs.io/en/latest/', None),
}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True
